# Logs-Website

Website to simplify accessing MySQL logs in a more visually
appealing way.

# Site Structure

This page uses php scripts to implement OAuth login via Google (http://www.codexworld.com/login-with-google-api-using-php/)

Copy the 'src' folder from the downloaded archive in the root directory and follow the instructions
in the tutorial to configure in Google (register API key, etc).

## Important Files

reportData.php - Either serves up the report requested (by col_id, matching to a database entry) or
	accepts parameters to update or insert records (API calls). Passing GET parameters will also filter the report on those columns.

reports/*.php - These are the scripts included in reportData.php if they match the reportType parameter.

dbconfig.php - Initiates database connection.

The reportData.php will load the dbconnection and then check to see if the user is authenticated (Google OAuth).
If they are it will serve them the reports their group settings allow them to see.

(TODO: We need to implement controls on who can make API updates)

js/ui_parameters.js - This is where the functions that create a report view are stored.  They use jQuery to 
	populate the parameters div with DOM elements to filter the report from reportData.php.
	
(TODO: jQuery and vanilla DOM syntax are mixed in these functions, this should be corrected to just jQuery).
	
css/reporting-styles.css - This stylesheet handles the custom elements for our page.

The other JS/CSS files are standard files for Bootstrap and DOM manipulation/AJAX scripting (jQuery).

## Execution Flow

- index.php - Lists reports that the user is permitted to view/displayes the report view if the user
	clicks on it (SPA functionality, pull via AJAX).
- reportData.php - Receives request for a report/execute API operation.  This file will include() the
	appropriate script from /reports/ according to the reportType parameter passed via GET.
	- The $query variable will be executed inside reportData.php, but it's built in the /reports/
	script.  The SQL query is not terminated with a semicolon intentionally, so that reportData.php
	can append a LIMIT clause for pagination.
- index.php - When the AJAX call to reportData.php succeeds, it calls loadTableData() function from ui_parameters.js
	and builds the headers with 20 rows of results (configurable in reportData.php).
	
# Reports

- Users
	Report that shows the users who have authenticated (logged in) and which groups they're assigned. Also
	add/remove/udpate.
	
- Report Management
	Lists the reports that have been created and which groups they belong to. Also add/remove/update.

- Group Management
	Lists the groups that have been created. Also add/remove/update.

- Report History
	Shows the history of calls to reportData.php and the parameters that were passed by which user.

- Blocks / Reinforcements
	List block placement/reinforcement actions.

- Chat
	Reports on chat history.

- Sessions
	Shows session history information.

- Commands
	Command history report.

- Entities
	Lists the entity history report.


# TODO / Bug List

- We need to implement controls on who can make API updates
- jQuery and vanilla DOM syntax are mixed in ui_parameters.js functions, this should be corrected to just jQuery
- Some of the scripts in /reports/ broke when I added the $hRow[] method of creating headers for the rows, the old
  way I was doing it was using UNION which would not have been appropriate for a large table.
- The /src/ folder should be removed in GIT before we push this to the general repository because the licence
on that project does not permit bundling the code.

-------------------------------------------------------------------------------------------------

# Logs-Website
Website to visually view mysql logs.

We're trying to make a logs website that will have few pages with wrapped querys.

# Parts to do.
There will be a few key parts to this system,

1) We need a user system, this will need to be a solid thing (perhaps google sso? to make it secure). But then I will need to be able to give different permissions to different users (so we need a human readable list (emails are fine bonus points for letting me add nicknames)).

2) Standardized log pages (just want them to look uniform). Needs to be able to be hosted on apache, should look like bootstrap (since its nice and clean)

3) Log pages to look up every info in each table as defined in this [repo](https://github.com/CivilizatonExperiment/CivExLogging/tree/master/src/com/civexperiment/CivExLogging/Database/Tables "CivExLogging/Database/Tables/") (These will change as needed).

4) *fluff* be able to add notes to each log (maybe you click on it and its a drop down? and only admin can delete these notes, each user can see who posted the note)

# pages

Landing page which could contain some stats

User management page which allows access to specific pages

User registration page

Block / reinforcement page

Chat page

Command page

Entity page

Session page

Search History page (last one done since i need to think this one more out

# Ref

This picture is of a previous version that I've had just for refrence, (i know its ugly but it worked)

Blocks
![](http://i.imgur.com/KVY4MD4.png)

Chat
![](http://i.imgur.com/a7FVod9.png)

Session
![](http://i.imgur.com/SeNskRZ.png)




[This is a link to a new Dev discord I made](https://discord.gg/rfeZEqM "Instant Invite link") It's currently setup so that I need to approve people so that we will know whos who in there. Just PM me on reddit with your name there and if you want me to change your nick.
